--- a/net/minecraft/core/RegistryAccess.java
+++ b/net/minecraft/core/RegistryAccess.java
@@ -106,7 +106,7 @@
    }
 
    private static <R extends Registry<?>> void m_123078_(RegistryAccess.RegistryHolder p_123079_, ResourceKey<R> p_123080_) {
-      Registry<R> registry = BuiltinRegistries.f_123858_;
+      Registry<R> registry = (Registry<R>)BuiltinRegistries.f_123858_;
       Registry<?> registry1 = registry.m_6246_(p_123080_);
       if (registry1 == null) {
          throw new IllegalStateException("Missing builtin registry: " + p_123080_);
@@ -136,7 +136,7 @@
 
    private static <E> void m_123081_(RegistryReadOps<?> p_123082_, RegistryAccess.RegistryHolder p_123083_, RegistryAccess.RegistryData<E> p_123084_) {
       ResourceKey<? extends Registry<E>> resourcekey = p_123084_.m_123108_();
-      MappedRegistry<E> mappedregistry = Optional.ofNullable(p_123083_.f_123113_.get(resourcekey)).map((p_123065_) -> {
+      MappedRegistry<E> mappedregistry = Optional.ofNullable((MappedRegistry<E>)p_123083_.f_123113_.get(resourcekey)).map((p_123065_) -> {
          return p_123065_;
       }).orElseThrow(() -> {
          return new IllegalStateException("Missing registry: " + resourcekey);
@@ -196,14 +196,14 @@
 
       private static <K extends ResourceKey<? extends Registry<?>>, V extends MappedRegistry<?>> Codec<RegistryAccess.RegistryHolder> m_123118_(UnboundedMapCodec<K, V> p_123119_) {
          return p_123119_.xmap(RegistryAccess.RegistryHolder::new, (p_123136_) -> {
-            return p_123136_.f_123113_.entrySet().stream().filter((p_123127_) -> {
+            return ((java.util.Set<Map.Entry<K, V>>)(Object)p_123136_.f_123113_.entrySet()).stream().filter((p_123127_) -> {
                return RegistryAccess.f_123048_.get(p_123127_.getKey()).m_123111_();
             }).collect(ImmutableMap.toImmutableMap(Entry::getKey, Entry::getValue));
          });
       }
 
       private static <E> DataResult<? extends Codec<E>> m_123137_(ResourceKey<? extends Registry<E>> p_123138_) {
-         return Optional.ofNullable(RegistryAccess.f_123048_.get(p_123138_)).map((p_123123_) -> {
+         return Optional.ofNullable((RegistryAccess.RegistryData<E>)RegistryAccess.f_123048_.get(p_123138_)).map((p_123123_) -> {
             return p_123123_.m_123110_();
          }).map(DataResult::success).orElseGet(() -> {
             return DataResult.error("Unknown or not serializable registry: " + p_123138_);
@@ -219,11 +219,11 @@
       }
 
       private static <E> MappedRegistry<?> m_123140_(ResourceKey<? extends Registry<?>> p_123141_) {
-         return new MappedRegistry<>(p_123141_, Lifecycle.stable());
+         return new MappedRegistry(p_123141_, Lifecycle.stable());
       }
 
       public <E> Optional<WritableRegistry<E>> m_6632_(ResourceKey<? extends Registry<E>> p_123129_) {
-         return Optional.ofNullable(this.f_123113_.get(p_123129_)).map((p_123121_) -> {
+         return Optional.ofNullable((WritableRegistry<E>)this.f_123113_.get(p_123129_)).map((p_123121_) -> {
             return p_123121_;
          });
       }
